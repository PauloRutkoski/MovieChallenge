// Mocks generated by Mockito 5.1.0 from annotations
// in paysmartchallenge/test/upcoming_list_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:paysmartchallenge/model/entities/genre.dart' as _i5;
import 'package:paysmartchallenge/model/entities/movie.dart' as _i4;
import 'package:paysmartchallenge/model/service/movie_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [MovieService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieService extends _i1.Mock implements _i2.MovieService {
  MockMovieService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Movie>> findUpcoming(int? page) =>
      (super.noSuchMethod(Invocation.method(#findUpcoming, [page]),
              returnValue: Future<List<_i4.Movie>>.value(<_i4.Movie>[]))
          as _i3.Future<List<_i4.Movie>>);
  @override
  _i3.Future<List<_i4.Movie>> findByQuery(String? query, int? page) =>
      (super.noSuchMethod(Invocation.method(#findByQuery, [query, page]),
              returnValue: Future<List<_i4.Movie>>.value(<_i4.Movie>[]))
          as _i3.Future<List<_i4.Movie>>);
  @override
  List<_i5.Genre> getGenres(List<_i5.Genre>? genres, List<int>? genreIds) =>
      (super.noSuchMethod(Invocation.method(#getGenres, [genres, genreIds]),
          returnValue: <_i5.Genre>[]) as List<_i5.Genre>);
}
